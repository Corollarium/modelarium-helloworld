<?php declare(strict_types=1);
/**
 * This file was automatically generated by Modelarium.
 */
namespace App\Models;

use Formularium\Exception\NoRandomException;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\Relations\MorphOne;
use Illuminate\Database\Eloquent\Relations\MorphTo;
use Illuminate\Database\Eloquent\Relations\MorphToMany;
use Illuminate\Support\Facades\Auth;
use Modelarium\Laravel\Datatypes\Datatype_relationship;

/**
 * This file was automatically generated by Modelarium.
 */
abstract class BasePost extends \Illuminate\Database\Eloquent\Model
{
    /**
     * The attributes that are mass assignable.
     * @var array
     */
    protected $fillable = ['title', 'content', 'country'];

    /**
     * The attributes that should be hidden for arrays.
     * @var array
     */
    protected $hidden = [];

    /**
     * Eager load these relationships.
     * @var array
     */
    protected $with = [];

    /**
     * @return array
     */
    public static function getFields(): array
    {
        return [
            'name' => 'Post',
            'renderable' => [],
            'extradata' => [['name' => 'migrationTimestamps', 'args' => []]],
            'fields' => [
                'title' => [
                    'datatype' => 'title',
                    'validators' => ['required' => ['value' => true]],
                    'renderable' => [
                        'title' => true,
                        'label' => 'Title',
                        'comment' => 'Please add a descriptive title',
                        'placeholder' => 'Type here',
                        'size' => 'large',
                        'card' => true,
                        'table' => true,
                    ],
                    'extradata' => [['name' => 'modelFillable', 'args' => []]],
                ],
                'content' => [
                    'datatype' => 'text',
                    'validators' => ['required' => ['value' => true]],
                    'renderable' => ['label' => 'Content', 'comment' => 'Your post contents'],
                    'extradata' => [['name' => 'modelFillable', 'args' => []]],
                ],
                'country' => [
                    'datatype' => 'countrycodeiso3',
                    'validators' => ['required' => ['value' => true]],
                    'renderable' => ['label' => 'Country', 'comment' => 'Pick a country', 'table' => true],
                    'extradata' => [['name' => 'modelFillable', 'args' => []]],
                ],
            ],
        ];
    }

    /**
     * @return \Formularium\Model
     */
    public static function getFormularium(): \Formularium\Model
    {
        $model = \Formularium\Model::fromStruct(static::getFields());
        return $model;
    }

    /**
     * @return array
     */
    public static function getRandomData(): array
    {
        $data = static::getFormularium()->getRandom(get_called_class() . '::getRandomFieldData');

        return $data;
    }

    /**
     * Filters fields and generate random data. Throw NoRandomException for fields you don't want to generate random data, or return a valid value.
     */
    public static function getRandomFieldData(\Formularium\Field $field, \Formularium\Model $model, array &$data)
    {
        $d = $field->getDatatype();
        if ($field->getExtradata("migrationSkip")) {
            throw new NoRandomException($field->getName());
        }
        if ($d instanceof Datatype_relationship) {
            if (!$d->getIsInverse() || !$field->getValidatorOption("required", "value", false)) {
                throw new NoRandomException($field->getName());
            }
            $data[$field->getName() . "_id"] = $field->getDatatype()->getRandom();
        } else {
            $data[$field->getName()] = $field->getDatatype()->getRandom();
        }
    }
}
